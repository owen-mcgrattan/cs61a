{"countData": {"lambdamisidentifyrtnval": 7, "lambdamisidentifyrtnval-lambdacallexpr": 7, "lambdamisidentifyrtnval-sloppy": 7, "prntstrwithquotes": 5, "prntstrwithquotes-printstring": 5, "fndispnothing": 1, "fndispnothing-functiondisplay": 1, "fncallneedsarg": 1, "fncallneedsarg-evalfncall": 1, "stackedcallsiserr": 1, "stackedcallsiserr-evalstackedfncall": 1, "lambdacallexprnotcall": 2, "lambdacallexprnotcall-lambdacallexpr": 2, "sloppyskipprnt": 1, "sloppyskipprnt-sloppy": 1, "assignstmtrtnval": 2, "assignstmtrtnval-assignment": 2, "lambdadefevalatdef": 1, "lambdadefevalatdef-lambdadefine": 1, "prntrtnsprntedval": 2, "prntrtnsprntedval-printreturnvalue": 2, "bindvartovarname": 1, "bindvartovarname-assignment": 1, "bindvartovarname-evalvar": 1, "prntnoneisweird": 1, "prntnoneisweird-printnone": 1}, "answerDict": {">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["[\"'123'\"]", "['123']", "['88']", "['\"123\"']", "['print 123']", "[\"print '123'\"]", "[\"print('123')\"]", "[\"return print('123')\"]", "['Error']", "['Nothing']", "['<function...>']", "['<function<lambda>.<locals>.<lambda> at 0x1018a17b8>']", "['Funciton']"], ">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nFunction\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["['Error']", "['Nothing']", "['Function']", "[\"'123'\"]", "[\"print('123')\"]", "[\"return print('123')\"]"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nLOCKED_ANSWER\n>>> c = b(4, 'dog')\nLOCKED_ANSWER\n>>> print(c)\nLOCKED_ANSWER\n": ["['Function']", "['Error']", "['summer']"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nNothing\n>>> c = b(4, 'dog')\nsummer\n>>> print(c)\nLOCKED_ANSWER\n": ["[\"'summer'\"]", "['summer']", "['c']", "['Nothing']"]}}